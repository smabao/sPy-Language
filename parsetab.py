
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftPLUSMINUSleftMULDIVMODAND ASSIGN BOOLEAN CHRLIT CLOSEBRACE CLOSECURLY CLOSEPAR COMMA DBLLIT DIV EQ FLTLIT GEQ GT INTLIT LEQ LT MINUS MOD MUL MULTI_COMMENT NEQ NOT OPENBRACE OPENCURLY OPENPAR OR PLUS QUOTATION SINGLE_COMMENT STRLIT TILDE UNDERSCORE VAR break call class def do else end end_def for if int is print return scan start string try whilemain_program : start OPENCURLY statement CLOSECURLY endstatement : emptyempty :  statement : statement statement statementstatement : VAR ASSIGN expression TILDEstatement : expression TILDEstatement : def VAR OPENPAR parameter CLOSEPAR statement end_defparameter : int VARparameter : string VARstatement : class VAR OPENCURLY statement CLOSECURLYstatement : VAR ASSIGN expression TILDE scan OPENPAR VAR CLOSEPAR TILDEstatement : VAR ASSIGN STRLIT TILDE scan OPENPAR VAR CLOSEPAR TILDEstatement : VAR ASSIGN expression TILDE return OPENPAR VAR CLOSEPAR TILDEstatement : VAR ASSIGN STRLIT TILDE return OPENPAR VAR CLOSEPAR TILDEstatement : print OPENPAR expression CLOSEPAR TILDEstatement : print OPENPAR STRLIT CLOSEPAR TILDEstatement : VAR ASSIGN expression TILDE print OPENPAR VAR CLOSEPAR TILDEstatement : VAR ASSIGN STRLIT TILDE print OPENPAR VAR CLOSEPAR TILDEstatement : if_statementif_statement : if OPENPAR boolean CLOSEPAR statementif_statement : if OPENPAR boolean CLOSEPAR statement else statementexpression : termexpression : booleanexpression : expression PLUS termexpression : expression MINUS termboolean : expression GT termboolean : expression GEQ termboolean : expression LT termboolean : expression LEQ termboolean : expression EQ termboolean : expression NEQ termboolean : expression AND termboolean : expression OR termterm : term MUL factorterm : term DIV factorterm : term MOD factorterm : STRLITterm : factorfactor : INTLITfactor : OPENPAR expression CLOSEPAR'
    
_lr_action_items = {'scan':([68,69,],[78,81,]),'int':([64,],[72,]),'STRLIT':([3,4,8,10,11,20,22,23,24,29,30,31,32,33,34,35,36,37,38,39,45,50,65,69,70,74,75,76,83,86,87,94,95,102,109,110,111,112,113,114,],[13,13,13,-19,-2,13,13,46,48,13,13,13,13,13,13,13,13,-6,13,13,13,13,13,-5,13,13,-16,-15,-10,13,13,13,13,-7,-14,-12,-18,-13,-11,-17,]),'CLOSECURLY':([3,8,10,11,22,37,45,50,65,69,70,74,75,76,83,87,95,102,109,110,111,112,113,114,],[-3,21,-19,-2,-3,-6,-3,-3,-3,-5,83,-3,-16,-15,-10,-3,-3,-7,-14,-12,-18,-13,-11,-17,]),'OPENPAR':([3,4,7,8,9,10,11,20,22,23,24,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,45,50,65,69,70,74,75,76,77,78,79,80,81,82,83,86,87,94,95,102,109,110,111,112,113,114,],[4,4,20,4,23,-19,-2,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,-6,4,4,64,4,4,4,-5,4,4,-16,-15,88,89,90,91,92,93,-10,4,4,4,4,-7,-14,-12,-18,-13,-11,-17,]),'INTLIT':([3,4,8,10,11,20,22,23,24,26,27,28,29,30,31,32,33,34,35,36,37,38,39,45,50,65,69,70,74,75,76,83,86,87,94,95,102,109,110,111,112,113,114,],[6,6,6,-19,-2,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,-6,6,6,6,6,6,-5,6,6,-16,-15,-10,6,6,6,6,-7,-14,-12,-18,-13,-11,-17,]),'MUL':([6,12,13,16,41,46,48,51,52,53,54,55,56,57,58,59,60,61,62,63,],[-39,-38,-37,26,-40,-37,-37,-34,-36,-35,26,26,26,26,26,26,26,26,26,26,]),'DIV':([6,12,13,16,41,46,48,51,52,53,54,55,56,57,58,59,60,61,62,63,],[-39,-38,-37,28,-40,-37,-37,-34,-36,-35,28,28,28,28,28,28,28,28,28,28,]),'MINUS':([5,6,12,13,16,17,19,41,42,43,46,47,48,49,51,52,53,54,55,56,57,58,59,60,61,62,63,],[-23,-39,-38,-37,-22,38,38,-40,-23,38,-37,38,-37,38,-34,-36,-35,-32,-26,-30,-27,-33,-29,-28,-24,-25,-31,]),'if':([3,8,10,11,22,37,45,50,65,69,70,74,75,76,83,86,87,94,95,102,109,110,111,112,113,114,],[7,7,-19,-2,7,-6,7,7,7,-5,7,7,-16,-15,-10,7,7,7,7,-7,-14,-12,-18,-13,-11,-17,]),'OPENCURLY':([1,25,],[3,50,]),'end':([21,],[44,]),'class':([3,8,10,11,22,37,45,50,65,69,70,74,75,76,83,86,87,94,95,102,109,110,111,112,113,114,],[15,15,-19,-2,15,-6,15,15,15,-5,15,15,-16,-15,-10,15,15,15,15,-7,-14,-12,-18,-13,-11,-17,]),'start':([0,],[1,]),'LT':([5,6,12,13,16,17,19,41,42,43,46,47,48,49,51,52,53,54,55,56,57,58,59,60,61,62,63,],[-23,-39,-38,-37,-22,35,35,-40,-23,35,-37,35,-37,35,-34,-36,-35,-32,-26,-30,-27,-33,-29,-28,-24,-25,-31,]),'PLUS':([5,6,12,13,16,17,19,41,42,43,46,47,48,49,51,52,53,54,55,56,57,58,59,60,61,62,63,],[-23,-39,-38,-37,-22,36,36,-40,-23,36,-37,36,-37,36,-34,-36,-35,-32,-26,-30,-27,-33,-29,-28,-24,-25,-31,]),'TILDE':([5,6,12,13,16,17,41,48,49,51,52,53,54,55,56,57,58,59,60,61,62,63,66,67,103,104,105,106,107,108,],[-23,-39,-38,-37,-22,37,-40,68,69,-34,-36,-35,-32,-26,-30,-27,-33,-29,-28,-24,-25,-31,75,76,109,110,111,112,113,114,]),'print':([3,8,10,11,22,37,45,50,65,68,69,70,74,75,76,83,86,87,94,95,102,109,110,111,112,113,114,],[9,9,-19,-2,9,-6,9,9,9,79,82,9,9,-16,-15,-10,9,9,9,9,-7,-14,-12,-18,-13,-11,-17,]),'NEQ':([5,6,12,13,16,17,19,41,42,43,46,47,48,49,51,52,53,54,55,56,57,58,59,60,61,62,63,],[-23,-39,-38,-37,-22,39,39,-40,-23,39,-37,39,-37,39,-34,-36,-35,-32,-26,-30,-27,-33,-29,-28,-24,-25,-31,]),'ASSIGN':([14,],[24,]),'$end':([2,44,],[0,-1,]),'end_def':([10,11,22,37,45,65,69,74,75,76,83,86,87,94,95,102,109,110,111,112,113,114,],[-19,-2,-3,-6,-3,-3,-5,-3,-16,-15,-10,-3,-3,102,-3,-7,-14,-12,-18,-13,-11,-17,]),'GT':([5,6,12,13,16,17,19,41,42,43,46,47,48,49,51,52,53,54,55,56,57,58,59,60,61,62,63,],[-23,-39,-38,-37,-22,30,30,-40,-23,30,-37,30,-37,30,-34,-36,-35,-32,-26,-30,-27,-33,-29,-28,-24,-25,-31,]),'return':([68,69,],[77,80,]),'string':([64,],[71,]),'GEQ':([5,6,12,13,16,17,19,41,42,43,46,47,48,49,51,52,53,54,55,56,57,58,59,60,61,62,63,],[-23,-39,-38,-37,-22,32,32,-40,-23,32,-37,32,-37,32,-34,-36,-35,-32,-26,-30,-27,-33,-29,-28,-24,-25,-31,]),'else':([10,11,22,37,45,65,69,74,75,76,83,87,95,102,109,110,111,112,113,114,],[-19,-2,-3,-6,-3,-3,-5,87,-16,-15,-10,-3,-3,-7,-14,-12,-18,-13,-11,-17,]),'VAR':([3,8,10,11,15,18,22,37,45,50,65,69,70,71,72,74,75,76,83,86,87,88,89,90,91,92,93,94,95,102,109,110,111,112,113,114,],[14,14,-19,-2,25,40,14,-6,14,14,14,-5,14,84,85,14,-16,-15,-10,14,14,96,97,98,99,100,101,14,14,-7,-14,-12,-18,-13,-11,-17,]),'EQ':([5,6,12,13,16,17,19,41,42,43,46,47,48,49,51,52,53,54,55,56,57,58,59,60,61,62,63,],[-23,-39,-38,-37,-22,31,31,-40,-23,31,-37,31,-37,31,-34,-36,-35,-32,-26,-30,-27,-33,-29,-28,-24,-25,-31,]),'CLOSEPAR':([5,6,12,13,16,19,41,42,46,47,51,52,53,54,55,56,57,58,59,60,61,62,63,73,84,85,96,97,98,99,100,101,],[-23,-39,-38,-37,-22,41,-40,65,66,67,-34,-36,-35,-32,-26,-30,-27,-33,-29,-28,-24,-25,-31,86,-9,-8,103,104,105,106,107,108,]),'AND':([5,6,12,13,16,17,19,41,42,43,46,47,48,49,51,52,53,54,55,56,57,58,59,60,61,62,63,],[-23,-39,-38,-37,-22,29,29,-40,-23,29,-37,29,-37,29,-34,-36,-35,-32,-26,-30,-27,-33,-29,-28,-24,-25,-31,]),'LEQ':([5,6,12,13,16,17,19,41,42,43,46,47,48,49,51,52,53,54,55,56,57,58,59,60,61,62,63,],[-23,-39,-38,-37,-22,34,34,-40,-23,34,-37,34,-37,34,-34,-36,-35,-32,-26,-30,-27,-33,-29,-28,-24,-25,-31,]),'OR':([5,6,12,13,16,17,19,41,42,43,46,47,48,49,51,52,53,54,55,56,57,58,59,60,61,62,63,],[-23,-39,-38,-37,-22,33,33,-40,-23,33,-37,33,-37,33,-34,-36,-35,-32,-26,-30,-27,-33,-29,-28,-24,-25,-31,]),'def':([3,8,10,11,22,37,45,50,65,69,70,74,75,76,83,86,87,94,95,102,109,110,111,112,113,114,],[18,18,-19,-2,18,-6,18,18,18,-5,18,18,-16,-15,-10,18,18,18,18,-7,-14,-12,-18,-13,-11,-17,]),'MOD':([6,12,13,16,41,46,48,51,52,53,54,55,56,57,58,59,60,61,62,63,],[-39,-38,-37,27,-40,-37,-37,-34,-36,-35,27,27,27,27,27,27,27,27,27,27,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'term':([3,4,8,20,22,23,24,29,30,31,32,33,34,35,36,38,39,45,50,65,70,74,86,87,94,95,],[16,16,16,16,16,16,16,54,55,56,57,58,59,60,61,62,63,16,16,16,16,16,16,16,16,16,]),'parameter':([64,],[73,]),'boolean':([3,4,8,20,22,23,24,45,50,65,70,74,86,87,94,95,],[5,5,5,42,5,5,5,5,5,5,5,5,5,5,5,5,]),'empty':([3,8,22,45,50,65,70,74,86,87,94,95,],[11,11,11,11,11,11,11,11,11,11,11,11,]),'statement':([3,8,22,45,50,65,70,74,86,87,94,95,],[8,22,45,45,70,74,22,22,94,95,22,22,]),'factor':([3,4,8,20,22,23,24,26,27,28,29,30,31,32,33,34,35,36,38,39,45,50,65,70,74,86,87,94,95,],[12,12,12,12,12,12,12,51,52,53,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,]),'if_statement':([3,8,22,45,50,65,70,74,86,87,94,95,],[10,10,10,10,10,10,10,10,10,10,10,10,]),'expression':([3,4,8,20,22,23,24,45,50,65,70,74,86,87,94,95,],[17,19,17,43,17,47,49,17,17,17,17,17,17,17,17,17,]),'main_program':([0,],[2,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> main_program","S'",1,None,None,None),
  ('main_program -> start OPENCURLY statement CLOSECURLY end','main_program',5,'p_main_program','main.py',332),
  ('statement -> empty','statement',1,'p_statement_empty','main.py',335),
  ('empty -> <empty>','empty',0,'p_empty_stmt','main.py',338),
  ('statement -> statement statement statement','statement',3,'p_statement_loop','main.py',342),
  ('statement -> VAR ASSIGN expression TILDE','statement',4,'p_statement_assign','main.py',345),
  ('statement -> expression TILDE','statement',2,'p_statement_expr','main.py',348),
  ('statement -> def VAR OPENPAR parameter CLOSEPAR statement end_def','statement',7,'p_statement_function','main.py',351),
  ('parameter -> int VAR','parameter',2,'p_parameter_int','main.py',354),
  ('parameter -> string VAR','parameter',2,'p_parameter_string','main.py',357),
  ('statement -> class VAR OPENCURLY statement CLOSECURLY','statement',5,'p_statement_class','main.py',360),
  ('statement -> VAR ASSIGN expression TILDE scan OPENPAR VAR CLOSEPAR TILDE','statement',9,'p_statement_scan','main.py',363),
  ('statement -> VAR ASSIGN STRLIT TILDE scan OPENPAR VAR CLOSEPAR TILDE','statement',9,'p_statement_scan_string','main.py',366),
  ('statement -> VAR ASSIGN expression TILDE return OPENPAR VAR CLOSEPAR TILDE','statement',9,'p_statement_return','main.py',369),
  ('statement -> VAR ASSIGN STRLIT TILDE return OPENPAR VAR CLOSEPAR TILDE','statement',9,'p_statement_return_string','main.py',373),
  ('statement -> print OPENPAR expression CLOSEPAR TILDE','statement',5,'p_statement_print','main.py',377),
  ('statement -> print OPENPAR STRLIT CLOSEPAR TILDE','statement',5,'p_statement_print_string','main.py',381),
  ('statement -> VAR ASSIGN expression TILDE print OPENPAR VAR CLOSEPAR TILDE','statement',9,'p_statement_print_var','main.py',385),
  ('statement -> VAR ASSIGN STRLIT TILDE print OPENPAR VAR CLOSEPAR TILDE','statement',9,'p_statement_print_var_string','main.py',389),
  ('statement -> if_statement','statement',1,'p_statement_if','main.py',393),
  ('if_statement -> if OPENPAR boolean CLOSEPAR statement','if_statement',5,'p_statement_if_stmt','main.py',396),
  ('if_statement -> if OPENPAR boolean CLOSEPAR statement else statement','if_statement',7,'p_statement_if_else','main.py',401),
  ('expression -> term','expression',1,'p_expression_term','main.py',408),
  ('expression -> boolean','expression',1,'p_expression_boolean','main.py',412),
  ('expression -> expression PLUS term','expression',3,'p_expression_PLUS','main.py',442),
  ('expression -> expression MINUS term','expression',3,'p_expression_MINUS','main.py',446),
  ('boolean -> expression GT term','boolean',3,'p_expression_GT','main.py',450),
  ('boolean -> expression GEQ term','boolean',3,'p_expression_GEQ','main.py',454),
  ('boolean -> expression LT term','boolean',3,'p_expression_LT','main.py',458),
  ('boolean -> expression LEQ term','boolean',3,'p_expression_LEQ','main.py',462),
  ('boolean -> expression EQ term','boolean',3,'p_expression_EQ','main.py',466),
  ('boolean -> expression NEQ term','boolean',3,'p_expression_NEQ','main.py',470),
  ('boolean -> expression AND term','boolean',3,'p_expression_AND','main.py',474),
  ('boolean -> expression OR term','boolean',3,'p_expression_OR','main.py',478),
  ('term -> term MUL factor','term',3,'p_term_MUL','main.py',482),
  ('term -> term DIV factor','term',3,'p_term_DIV','main.py',486),
  ('term -> term MOD factor','term',3,'p_term_MOD','main.py',490),
  ('term -> STRLIT','term',1,'p_term_STR','main.py',494),
  ('term -> factor','term',1,'p_term_factor','main.py',498),
  ('factor -> INTLIT','factor',1,'p_factor_INT','main.py',502),
  ('factor -> OPENPAR expression CLOSEPAR','factor',3,'p_factor_expr','main.py',506),
]
