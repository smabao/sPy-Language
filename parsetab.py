
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftPLUSMINUSleftMULDIVMODAND ASSIGN BOOLEAN CHRLIT CLOSEBRACE CLOSECURLY CLOSEPAR COMMA DBLLIT DIV EQ FLTLIT GEQ GT INTLIT LEQ LT MINUS MOD MUL MULTI_COMMENT NEQ NOT OPENBRACE OPENCURLY OPENPAR OR PLUS QUOTATION SINGLE_COMMENT STRLIT TILDE UNDERSCORE VAR break call class def do else end end_def for if int is print return scan start string try whilemain_program : start OPENCURLY statement CLOSECURLY endstatement : emptyempty :  statement : statement_liststatement_list : statement\n                      | statement statement_liststatement : VAR ASSIGN expression TILDEstatement : expression TILDEstatement : def VAR OPENPAR parameter CLOSEPAR OPENCURLY statement  CLOSECURLY end_defparameter : int VARparameter : string VARstatement : class VAR OPENCURLY statement CLOSECURLYstatement : VAR ASSIGN expression TILDE scan OPENPAR VAR CLOSEPAR TILDEstatement : VAR ASSIGN STRLIT TILDE scan OPENPAR VAR CLOSEPAR TILDEstatement : VAR ASSIGN expression TILDE return OPENPAR VAR CLOSEPAR TILDEstatement : VAR ASSIGN STRLIT TILDE return OPENPAR VAR CLOSEPAR TILDEstatement : print OPENPAR expression CLOSEPAR TILDEstatement : print OPENPAR STRLIT CLOSEPAR TILDEstatement : VAR ASSIGN expression TILDE print OPENPAR VAR CLOSEPAR TILDEstatement : VAR ASSIGN STRLIT TILDE print OPENPAR VAR CLOSEPAR TILDEstatement : if_statementif_statement : if OPENPAR boolean CLOSEPAR OPENCURLY statement CLOSECURLYif_statement : if OPENPAR boolean CLOSEPAR OPENCURLY statement CLOSECURLY else OPENCURLY statement CLOSECURLY expression : termexpression : booleanboolean : expression GT term\n               | expression GEQ term\n               | expression LT term\n               | expression LEQ term\n               | expression EQ term\n               | expression NEQ term\n               | expression AND term\n               | expression OR termexpression : expression PLUS termexpression : expression MINUS termterm : term MUL factorterm : term DIV factorterm : term MOD factorterm : STRLITterm : factorfactor : INTLITfactor : OPENPAR expression CLOSEPAR'
    
_lr_action_items = {'start':([0,],[2,]),'$end':([1,43,],[0,-1,]),'OPENCURLY':([2,37,74,81,111,],[3,58,87,94,119,]),'VAR':([3,4,5,6,9,11,14,20,22,24,58,66,69,70,71,84,85,86,87,88,89,90,91,92,93,94,95,102,103,112,113,114,115,116,117,118,119,120,121,],[7,7,-2,-4,35,37,-21,7,-4,-8,7,-7,82,83,7,-12,-17,-18,7,96,97,98,99,100,101,7,7,7,-22,-13,-15,-19,-14,-16,-20,-9,7,7,-23,]),'def':([3,4,5,6,14,20,22,24,58,66,71,84,85,86,87,94,95,102,103,112,113,114,115,116,117,118,119,120,121,],[9,9,-2,-4,-21,9,-4,-8,9,-7,9,-12,-17,-18,9,9,9,9,-22,-13,-15,-19,-14,-16,-20,-9,9,9,-23,]),'class':([3,4,5,6,14,20,22,24,58,66,71,84,85,86,87,94,95,102,103,112,113,114,115,116,117,118,119,120,121,],[11,11,-2,-4,-21,11,-4,-8,11,-7,11,-12,-17,-18,11,11,11,11,-22,-13,-15,-19,-14,-16,-20,-9,11,11,-23,]),'print':([3,4,5,6,14,20,22,24,58,66,67,71,84,85,86,87,94,95,102,103,112,113,114,115,116,117,118,119,120,121,],[13,13,-2,-4,-21,13,-4,-8,13,77,80,13,-12,-17,-18,13,13,13,13,-22,-13,-15,-19,-14,-16,-20,-9,13,13,-23,]),'CLOSECURLY':([3,4,5,6,14,20,22,24,58,66,71,84,85,86,87,94,95,102,103,112,113,114,115,116,117,118,119,120,121,],[-3,21,-2,-4,-21,-3,-4,-8,-3,-7,84,-12,-17,-18,-3,-3,103,110,-22,-13,-15,-19,-14,-16,-20,-9,-3,121,-23,]),'if':([3,4,5,6,14,20,22,24,58,66,71,84,85,86,87,94,95,102,103,112,113,114,115,116,117,118,119,120,121,],[17,17,-2,-4,-21,17,-4,-8,17,-7,17,-12,-17,-18,17,17,17,17,-22,-13,-15,-19,-14,-16,-20,-9,17,17,-23,]),'STRLIT':([3,4,5,6,10,14,20,22,23,24,25,26,27,28,29,30,31,32,33,34,38,42,58,66,71,84,85,86,87,94,95,102,103,112,113,114,115,116,117,118,119,120,121,],[12,12,-2,-4,12,-21,12,-4,45,-8,12,12,12,12,12,12,12,12,12,12,60,12,12,-7,12,-12,-17,-18,12,12,12,12,-22,-13,-15,-19,-14,-16,-20,-9,12,12,-23,]),'INTLIT':([3,4,5,6,10,14,20,22,23,24,25,26,27,28,29,30,31,32,33,34,38,39,40,41,42,58,66,71,84,85,86,87,94,95,102,103,112,113,114,115,116,117,118,119,120,121,],[19,19,-2,-4,19,-21,19,-4,19,-8,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,-7,19,-12,-17,-18,19,19,19,19,-22,-13,-15,-19,-14,-16,-20,-9,19,19,-23,]),'OPENPAR':([3,4,5,6,10,13,14,17,20,22,23,24,25,26,27,28,29,30,31,32,33,34,35,38,39,40,41,42,58,66,71,75,76,77,78,79,80,84,85,86,87,94,95,102,103,112,113,114,115,116,117,118,119,120,121,],[10,10,-2,-4,10,38,-21,42,10,-4,10,-8,10,10,10,10,10,10,10,10,10,10,56,10,10,10,10,10,10,-7,10,88,89,90,91,92,93,-12,-17,-18,10,10,10,10,-22,-13,-15,-19,-14,-16,-20,-9,10,10,-23,]),'ASSIGN':([7,],[23,]),'TILDE':([8,12,15,16,18,19,44,45,46,47,48,49,50,51,52,53,54,55,57,61,62,63,72,73,104,105,106,107,108,109,],[24,-39,-24,-25,-40,-41,66,67,-34,-35,-26,-27,-28,-29,-30,-31,-32,-33,-42,-36,-37,-38,85,86,112,113,114,115,116,117,]),'PLUS':([8,12,15,16,18,19,36,44,45,46,47,48,49,50,51,52,53,54,55,57,59,60,61,62,63,64,65,],[25,-39,-24,-25,-40,-41,25,25,-39,-34,-35,-26,-27,-28,-29,-30,-31,-32,-33,-42,25,-39,-36,-37,-38,-25,25,]),'MINUS':([8,12,15,16,18,19,36,44,45,46,47,48,49,50,51,52,53,54,55,57,59,60,61,62,63,64,65,],[26,-39,-24,-25,-40,-41,26,26,-39,-34,-35,-26,-27,-28,-29,-30,-31,-32,-33,-42,26,-39,-36,-37,-38,-25,26,]),'GT':([8,12,15,16,18,19,36,44,45,46,47,48,49,50,51,52,53,54,55,57,59,60,61,62,63,64,65,],[27,-39,-24,-25,-40,-41,27,27,-39,-34,-35,-26,-27,-28,-29,-30,-31,-32,-33,-42,27,-39,-36,-37,-38,-25,27,]),'GEQ':([8,12,15,16,18,19,36,44,45,46,47,48,49,50,51,52,53,54,55,57,59,60,61,62,63,64,65,],[28,-39,-24,-25,-40,-41,28,28,-39,-34,-35,-26,-27,-28,-29,-30,-31,-32,-33,-42,28,-39,-36,-37,-38,-25,28,]),'LT':([8,12,15,16,18,19,36,44,45,46,47,48,49,50,51,52,53,54,55,57,59,60,61,62,63,64,65,],[29,-39,-24,-25,-40,-41,29,29,-39,-34,-35,-26,-27,-28,-29,-30,-31,-32,-33,-42,29,-39,-36,-37,-38,-25,29,]),'LEQ':([8,12,15,16,18,19,36,44,45,46,47,48,49,50,51,52,53,54,55,57,59,60,61,62,63,64,65,],[30,-39,-24,-25,-40,-41,30,30,-39,-34,-35,-26,-27,-28,-29,-30,-31,-32,-33,-42,30,-39,-36,-37,-38,-25,30,]),'EQ':([8,12,15,16,18,19,36,44,45,46,47,48,49,50,51,52,53,54,55,57,59,60,61,62,63,64,65,],[31,-39,-24,-25,-40,-41,31,31,-39,-34,-35,-26,-27,-28,-29,-30,-31,-32,-33,-42,31,-39,-36,-37,-38,-25,31,]),'NEQ':([8,12,15,16,18,19,36,44,45,46,47,48,49,50,51,52,53,54,55,57,59,60,61,62,63,64,65,],[32,-39,-24,-25,-40,-41,32,32,-39,-34,-35,-26,-27,-28,-29,-30,-31,-32,-33,-42,32,-39,-36,-37,-38,-25,32,]),'AND':([8,12,15,16,18,19,36,44,45,46,47,48,49,50,51,52,53,54,55,57,59,60,61,62,63,64,65,],[33,-39,-24,-25,-40,-41,33,33,-39,-34,-35,-26,-27,-28,-29,-30,-31,-32,-33,-42,33,-39,-36,-37,-38,-25,33,]),'OR':([8,12,15,16,18,19,36,44,45,46,47,48,49,50,51,52,53,54,55,57,59,60,61,62,63,64,65,],[34,-39,-24,-25,-40,-41,34,34,-39,-34,-35,-26,-27,-28,-29,-30,-31,-32,-33,-42,34,-39,-36,-37,-38,-25,34,]),'MUL':([12,15,18,19,45,46,47,48,49,50,51,52,53,54,55,57,60,61,62,63,],[-39,39,-40,-41,-39,39,39,39,39,39,39,39,39,39,39,-42,-39,-36,-37,-38,]),'DIV':([12,15,18,19,45,46,47,48,49,50,51,52,53,54,55,57,60,61,62,63,],[-39,40,-40,-41,-39,40,40,40,40,40,40,40,40,40,40,-42,-39,-36,-37,-38,]),'MOD':([12,15,18,19,45,46,47,48,49,50,51,52,53,54,55,57,60,61,62,63,],[-39,41,-40,-41,-39,41,41,41,41,41,41,41,41,41,41,-42,-39,-36,-37,-38,]),'CLOSEPAR':([12,15,16,18,19,36,46,47,48,49,50,51,52,53,54,55,57,59,60,61,62,63,64,68,82,83,96,97,98,99,100,101,],[-39,-24,-25,-40,-41,57,-34,-35,-26,-27,-28,-29,-30,-31,-32,-33,-42,72,73,-36,-37,-38,74,81,-10,-11,104,105,106,107,108,109,]),'end':([21,],[43,]),'int':([56,],[69,]),'string':([56,],[70,]),'scan':([66,67,],[75,78,]),'return':([66,67,],[76,79,]),'else':([103,],[111,]),'end_def':([110,],[118,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'main_program':([0,],[1,]),'statement':([3,4,20,58,71,87,94,95,102,119,120,],[4,20,20,71,20,95,102,20,20,120,20,]),'empty':([3,4,20,58,71,87,94,95,102,119,120,],[5,5,5,5,5,5,5,5,5,5,5,]),'statement_list':([3,4,20,58,71,87,94,95,102,119,120,],[6,22,22,6,22,6,6,22,22,6,22,]),'expression':([3,4,10,20,23,38,42,58,71,87,94,95,102,119,120,],[8,8,36,8,44,59,65,8,8,8,8,8,8,8,8,]),'if_statement':([3,4,20,58,71,87,94,95,102,119,120,],[14,14,14,14,14,14,14,14,14,14,14,]),'term':([3,4,10,20,23,25,26,27,28,29,30,31,32,33,34,38,42,58,71,87,94,95,102,119,120,],[15,15,15,15,15,46,47,48,49,50,51,52,53,54,55,15,15,15,15,15,15,15,15,15,15,]),'boolean':([3,4,10,20,23,38,42,58,71,87,94,95,102,119,120,],[16,16,16,16,16,16,64,16,16,16,16,16,16,16,16,]),'factor':([3,4,10,20,23,25,26,27,28,29,30,31,32,33,34,38,39,40,41,42,58,71,87,94,95,102,119,120,],[18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,61,62,63,18,18,18,18,18,18,18,18,18,]),'parameter':([56,],[68,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> main_program","S'",1,None,None,None),
  ('main_program -> start OPENCURLY statement CLOSECURLY end','main_program',5,'p_main_program','main.py',332),
  ('statement -> empty','statement',1,'p_statement_empty','main.py',335),
  ('empty -> <empty>','empty',0,'p_empty_stmt','main.py',338),
  ('statement -> statement_list','statement',1,'p_statement_stmtList','main.py',342),
  ('statement_list -> statement','statement_list',1,'p_statementList','main.py',345),
  ('statement_list -> statement statement_list','statement_list',2,'p_statementList','main.py',346),
  ('statement -> VAR ASSIGN expression TILDE','statement',4,'p_statement_assign','main.py',349),
  ('statement -> expression TILDE','statement',2,'p_statement_expr','main.py',352),
  ('statement -> def VAR OPENPAR parameter CLOSEPAR OPENCURLY statement CLOSECURLY end_def','statement',9,'p_statement_function','main.py',355),
  ('parameter -> int VAR','parameter',2,'p_parameter_int','main.py',358),
  ('parameter -> string VAR','parameter',2,'p_parameter_string','main.py',361),
  ('statement -> class VAR OPENCURLY statement CLOSECURLY','statement',5,'p_statement_class','main.py',364),
  ('statement -> VAR ASSIGN expression TILDE scan OPENPAR VAR CLOSEPAR TILDE','statement',9,'p_statement_scan','main.py',367),
  ('statement -> VAR ASSIGN STRLIT TILDE scan OPENPAR VAR CLOSEPAR TILDE','statement',9,'p_statement_scan_string','main.py',370),
  ('statement -> VAR ASSIGN expression TILDE return OPENPAR VAR CLOSEPAR TILDE','statement',9,'p_statement_return','main.py',373),
  ('statement -> VAR ASSIGN STRLIT TILDE return OPENPAR VAR CLOSEPAR TILDE','statement',9,'p_statement_return_string','main.py',377),
  ('statement -> print OPENPAR expression CLOSEPAR TILDE','statement',5,'p_statement_print','main.py',381),
  ('statement -> print OPENPAR STRLIT CLOSEPAR TILDE','statement',5,'p_statement_print_string','main.py',385),
  ('statement -> VAR ASSIGN expression TILDE print OPENPAR VAR CLOSEPAR TILDE','statement',9,'p_statement_print_var','main.py',389),
  ('statement -> VAR ASSIGN STRLIT TILDE print OPENPAR VAR CLOSEPAR TILDE','statement',9,'p_statement_print_var_string','main.py',393),
  ('statement -> if_statement','statement',1,'p_statement_if','main.py',397),
  ('if_statement -> if OPENPAR boolean CLOSEPAR OPENCURLY statement CLOSECURLY','if_statement',7,'p_statement_if_stmt','main.py',400),
  ('if_statement -> if OPENPAR boolean CLOSEPAR OPENCURLY statement CLOSECURLY else OPENCURLY statement CLOSECURLY','if_statement',11,'p_statement_if_else','main.py',405),
  ('expression -> term','expression',1,'p_expression_term','main.py',412),
  ('expression -> boolean','expression',1,'p_expression_boolean','main.py',416),
  ('boolean -> expression GT term','boolean',3,'p_boolean','main.py',420),
  ('boolean -> expression GEQ term','boolean',3,'p_boolean','main.py',421),
  ('boolean -> expression LT term','boolean',3,'p_boolean','main.py',422),
  ('boolean -> expression LEQ term','boolean',3,'p_boolean','main.py',423),
  ('boolean -> expression EQ term','boolean',3,'p_boolean','main.py',424),
  ('boolean -> expression NEQ term','boolean',3,'p_boolean','main.py',425),
  ('boolean -> expression AND term','boolean',3,'p_boolean','main.py',426),
  ('boolean -> expression OR term','boolean',3,'p_boolean','main.py',427),
  ('expression -> expression PLUS term','expression',3,'p_expression_PLUS','main.py',478),
  ('expression -> expression MINUS term','expression',3,'p_expression_MINUS','main.py',482),
  ('term -> term MUL factor','term',3,'p_term_MUL','main.py',486),
  ('term -> term DIV factor','term',3,'p_term_DIV','main.py',490),
  ('term -> term MOD factor','term',3,'p_term_MOD','main.py',494),
  ('term -> STRLIT','term',1,'p_term_STR','main.py',498),
  ('term -> factor','term',1,'p_term_factor','main.py',502),
  ('factor -> INTLIT','factor',1,'p_factor_INT','main.py',506),
  ('factor -> OPENPAR expression CLOSEPAR','factor',3,'p_factor_expr','main.py',510),
]
